using CoolCrafts.WebSite.Models;
using CoolCrafts.WebSite.Services;
using System.Text.Json;

namespace CoolCrafts.WebSite
{
    public class Program
    {
        // Contains the application startup code
        public static void Main(string[] args)
        {
            /*
            Constructing a web application from  
            Microsoft.AspNetCore.Builder.WebApplication

            The following lines of code in this file create a WebApplicationBuilder
            with pre-configured defaults, add Razor Pages support 
            to the Dependency Injection (DI) container, 
            Link: https://learn.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection?view=aspnetcore-7.0
             */

            // builder has configuration, logging, and many other services added to the DI container:
            var builder = WebApplication.CreateBuilder(args);

            // Add services to the container.
            builder.Services.AddRazorPages();

            
            /*
            IMPORTANT NOTE (Our personal code):
            ***********************************
            Below adding our custom code for our service
            which is the connection to our JSON File:

            We can do it using one of the two major ones to identify the service lifetime:
            - AddSingleton:
            services are created just at the first time they are requested 
            (or when ConfigureServices is run if you specify an instance there) 
            and then every subsequent request will use the same instance.
            
            - AddTransient:
            services are created each time they are requested during the runtime,
            which works best for lightweight, stateless services.

            Link: https://learn.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection?view=aspnetcore-7.0#framework-provided-services

            We need to use it (will be added by VS IDE):
            using CoolCrafts.WebSite.Services;

            Now AP.NET is aware bout our services cs file "JsonFileProductService"
            */
            builder.Services.AddTransient<JsonFileProductService>();

            // Then building the app:
            // app for building the application and adding the services (dependencies)
            // what is called "Dependencies Injections"
            var app = builder.Build();

            /*
             * Execution environments, such as Development, Staging, and Production, 
             * are available in ASP.NET Core. 
             * 
             * The following example configures the exception handler 
             * and HTTP Strict Transport Security Protocol (HSTS) middleware 
             * when not running in the Development environment:
             * 
            The developer exception page is enabled by default 
            and provides helpful information on exceptions 
            when the app is not running in development mode (in production):
            
            > set the exception endpoint to /Error 
            > using "HTTP Strict Transport Security Protocol (HSTS)"
            */

            // Configure the HTTP request pipeline.
            if (!app.Environment.IsDevelopment())
            {                
                app.UseExceptionHandler("/Error");
                // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
                app.UseHsts();
            }

            //  enables various Middleware:
            /*
            Middleware is software that's assembled into an app pipeline
            to handle requests and responses.

            Pipelining is the process of storing and prioritizing computer instructions
            that the processor executes
            */

            // adding the services for our application

            // Redirects HTTP requests to HTTPS:
            app.UseHttpsRedirection(); 

            // Enables static files, such as HTML, CSS, images, and JavaScript to be served.
            app.UseStaticFiles();

            /*
            Routing:
            A route is a URL pattern that is mapped to a handler. 
            The handler is typically a Razor page, an action method in an MVC controller, 
            or a middleware.
            
            ASP.NET Core routing gives you control over the URLs used by your app.

            The following code, generated by the ASP.NET Core web application template, 
            calls UseRouting:
            */
            // Adds route matching to the middleware pipeline. 
            app.UseRouting();

            /*
            Authorizes a user to access secure resources. 
            This app doesn't use authorization, therefore this line could be removed:
             */
            app.UseAuthorization();

            // Configures endpoint routing for Razor Pages:
            app.MapRazorPages();

            /*
            Using minimal API 
            When we create an ASP.NET Core Web Application:
            - we use MapGet() to get the end point route.
            - MapGet() can have two parameters:
            1: The URL route which represents the end-point
            2: The handler method to be invoked/triggered based on the endpoint 
            - Using lambda expression to call an anonymous method

            This Mapping code line for making a simple API
            to load our products page:   
            
            After finishing the code, test the output:
            ******************************************
            https://localhost:7018/products
            */

            /*
            IMPORTANT NOTE:
            ***************
            Please consider commenting this block of code 
            we don't need it anymore after adding the dedicated controller code
            The "Controller" for MVC idea
            Otherwise error: 
            AmbiguousMatchException: The request matched multiple endpoints. Matches:
            */

            /*
            app.MapGet("/products",(HttpContext httpContext) =>
            {
                /*
                NOTE:
                Notice the use of the new "app.Services" for version 7,
                instead of using "app.ApplicationServices" in older version (3)
                * /
                var products = app.Services.GetService<JsonFileProductService>().GetProducts();
                /*
                - getting the json variable => serialize all its products (objects)
                - of type IEnumerable (IEnumerable refers to any type of collection/list)
                - <Product> refers to the Product.cs in the Models
                - we have to "using" the model: using CoolCrafts.WebSite.Models;
                 * /
                var json = JsonSerializer.Serialize<IEnumerable<Product>>(products);
                return httpContext.Response.WriteAsync(json);
            });
            */

            /*
            NOTES: 
            1. Please be advised that is line of code is needed after adding our controller:
            Mapping to our controller

            2. MapControllers() method => will refer to the /products
            because our controller file is named "ProductsController"

            Then you can test it :-) https://localhost:7018/products
            */
            app.MapControllers();

            
            // Finally the default code: Runs the app:
            app.Run();

            /*
             Link: https://learn.microsoft.com/en-us/dotnet/framework/migration-guide/how-to-determine-which-versions-are-installed#find-clr-versions
             */
            Console.WriteLine($"Version: {Environment.Version}");
            Console.ReadLine();
        } // Main
    } // class
} // namespace